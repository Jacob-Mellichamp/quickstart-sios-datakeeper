---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'This template deploys two Windows Server Failover Clustering (WSFC)
  nodes with SQL Server 2014 and DataKeeper replication software. This template is
  intended to be installed into an existing VPC that was built using the sample reference
  architecture titled: "Implementing Active Directory Domain Services in the AWS Cloud"
  **WARNING** This template creates Amazon EC2 Windows instance and related resources.
  You will be billed for the AWS resources used if you create a stack from this template.
  (qs-1qup6ralg)'
Metadata:
  AWSAMIRegionMap:
    Filters:
      SDKCEWIN2019:
        name: SIOS DataKeeper v8* on 2019*
        owner-alias: aws-marketplace
        product-code.type: marketplace
        product-code: 4751lqgr72zqz6fwj12p82x8s
      SDKCEWIN2019BYOL:
        name: SIOS DataKeeper v8* on 2019 BYOL*
        owner-alias: aws-marketplace
        product-code.type: marketplace
        product-code: 4em0o0s00hf8yye81sq8d619d
      SDKCEWIN2016:
        name: SIOS DataKeeper v8* on 2016*
        owner-alias: aws-marketplace
        product-code.type: marketplace
        product-code: 39ui2evyq6bmfxwhpwyci6l06
      SDKCEWIN2016BYOL:
        name: SIOS DataKeeper v8* on 2016 BYOL*
        owner-alias: aws-marketplace
        product-code.type: marketplace
        product-code: 959g9sxo7jo9axg7au8fjxvmi
      SDKCEWIN2012R2:
        name: SIOS DataKeeper v8* on 2012R2*
        owner-alias: aws-marketplace
        product-code.type: marketplace
        product-code: dvw0k1cslwup93kxyf85trjxm
      SDKCEWIN2012R2BYOL:
        name: SIOS DataKeeper v8* on 2012R2 BYOL*
        owner-alias: aws-marketplace
        product-code.type: marketplace
        product-code: 14oj75sfcidvzwqizi8lzs7c2
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Network Configuration
        Parameters:
          - VPCID
          - PrivateSubnet1ID
          - PrivateSubnet1CIDR
          - PrivateSubnet2ID
          - PrivateSubnet2CIDR
      - Label:
          default: Amazon EC2 Configuration
        Parameters:
          - KeyPairName
      - Label:
          default: Microsoft Active Directory Configuration
        Parameters:
          - DomainDNSName
          - DomainNetBIOSName
          - DomainAdminUser
          - DomainAdminPassword
          - ADServer1NetBIOSName
          - ADServer1PrivateIP
          - ADServer2NetBIOSName
          - ADServer2PrivateIP
          - DomainMemberSGID
      - Label:
          default: Replication Configuration
        Parameters:
          - AMIType
          - SIOSLicenseKeyFtpURL
          - SQLServerVersion
          - SQLServiceAccount
          - SQLServiceAccountPassword
          - Volume1Size
          - Volume1Type
          - Volume1Iops
      - Label:
          default: Failover Cluster Configuration
        Parameters:
          - OSVersion
          - WSFCNode1InstanceType
          - WSFCNode1NetBIOSName
          - WSFCNode1PrivateIP1
          - WSFCNode1PrivateIP2
          - WSFCNode1PrivateIP3
          - WSFCNode2InstanceType
          - WSFCNode2NetBIOSName
          - WSFCNode2PrivateIP1
          - WSFCNode2PrivateIP2
          - WSFCNode2PrivateIP3
      - Label:
          default: AWS Quick Start Configuration
        Parameters:
          - QSS3BucketName
          - QSS3BucketRegion
          - QSS3KeyPrefix
    ParameterLabels:
      OSVersion:
        default: Cluster Node OS Version
      ADServer1NetBIOSName:
        default: Domain Controller 1 NetBIOS Name
      ADServer1PrivateIP:
        default: Domain Controller 1 Private IP Address
      ADServer2NetBIOSName:
        default: Domain Controller 2 NetBIOS Name
      ADServer2PrivateIP:
        default: Domain Controller 2 Private IP Address
      DomainAdminPassword:
        default: Domain Admin Password
      DomainAdminUser:
        default: Domain Admin User Name
      DomainDNSName:
        default: Domain DNS Name
      DomainMemberSGID:
        default: Security Group ID for AD domain members
      DomainNetBIOSName:
        default: Domain NetBIOS Name
      KeyPairName:
        default: Key Pair Name
      PrivateSubnet1ID:
        default: Private Subnet 1 ID
      PrivateSubnet1CIDR:
        default: Private Subnet 1 CIDR
      PrivateSubnet2ID:
        default: Private Subnet 2 ID
      PrivateSubnet2CIDR:
        default: Private Subnet 2 CIDR
      QSS3BucketName:
        default: Quick Start S3 Bucket Name
      QSS3BucketRegion:
        default: Quick Start S3 bucket region
      QSS3KeyPrefix:
        default: Quick Start S3 Key Prefix
      SIOSLicenseKeyFtpURL:
        default: SIOS License Key FTP URL
      SQLServerVersion:
        default: SQL Server Version
      SQLServiceAccount:
        default: Service Account Name
      SQLServiceAccountPassword:
        default: Service Account Password
      Volume1Iops:
        default: Data Volume IOPS
      Volume1Size:
        default: Data Volume Size (GiB)
      Volume1Type:
        default: Data Volume Type
      VPCID:
        default: VPC to place SQL cluster in
      WSFCNode1InstanceType:
        default: Instance Type for Cluster Node 1
      WSFCNode1NetBIOSName:
        default: Cluster Node 1 NetBIOS Name
      WSFCNode1PrivateIP1:
        default: Cluster Node 1 Private IP Address 1
      WSFCNode1PrivateIP2:
        default: Cluster Node 1 Private IP Address 2
      WSFCNode1PrivateIP3:
        default: Cluster Node 1 Private IP Address 3
      WSFCNode2InstanceType:
        default: Instance Type for Cluster Node 2
      WSFCNode2NetBIOSName:
        default: Cluster Node 2 NetBIOS Name
      WSFCNode2PrivateIP1:
        default: Cluster Node 2 Private IP Address 1
      WSFCNode2PrivateIP2:
        default: Cluster Node 2 Private IP Address 2
      WSFCNode2PrivateIP3:
        default: Cluster Node 2 Private IP Address 3
      AMIType:
        default: SIOS AMI Version
Parameters:
  AMIType:
    AllowedValues:
      - PAYG
      - BYOL
    Default: PAYG
    Description: AMI type for SIOS license purposes.
    Type: String
  OSVersion:
    AllowedValues:
      - WS2012R2
      - WS2016
      - WS2019
    Default: WS2012R2
    Description: Windows Server OS version to use for cluster nodes.
    Type: String
  ADServer1NetBIOSName:
    AllowedPattern: '[a-zA-Z0-9]+'
    Default: DC1
    Description: NetBIOS name of the first Active Directory server (up to 15 characters)
    MaxLength: '15'
    MinLength: '1'
    Type: String
  ADServer1PrivateIP:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$
    Default: 10.0.0.10
    Description: Fixed private IP for the first Active Directory server located in
      Availability Zone 1
    Type: String
  ADServer2NetBIOSName:
    AllowedPattern: '[a-zA-Z0-9]+'
    Default: DC2
    Description: NetBIOS name of the second Active Directory server (up to 15 characters)
    MaxLength: '15'
    MinLength: '1'
    Type: String
  ADServer2PrivateIP:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$
    Default: 10.0.32.10
    Description: Fixed private IP for the second Active Directory server located in
      Availability Zone 2
    Type: String
  ClusterName: 
    AllowedPattern: '[a-zA-Z0-9]+'
    Default: WSFCCluster1
    Description: NetBIOS name of the WSFC Cluster
    MaxLength: '15'
    MinLength: '1'
    Type: String
  DomainAdminPassword:
    AllowedPattern: (?=^.{6,255}$)((?=.*\d)(?=.*[A-Z])(?=.*[a-z])|(?=.*\d)(?=.*[^A-Za-z0-9])(?=.*[a-z])|(?=.*[^A-Za-z0-9])(?=.*[A-Z])(?=.*[a-z])|(?=.*\d)(?=.*[A-Z])(?=.*[^A-Za-z0-9]))^.*
    Description: Password for the domain admin user. Must be at least 8 characters
      containing letters, numbers and symbols
    MaxLength: '32'
    MinLength: '8'
    NoEcho: 'true'
    Type: String
  DomainAdminUser:
    AllowedPattern: '[a-zA-Z0-9]*'
    Default: siosadmin
    Description: User name for the account that will be used as Domain Administrator.
      This is separate from the default "Administrator" account
    MaxLength: '25'
    MinLength: '5'
    Type: String
  DomainDNSName:
    AllowedPattern: '[a-zA-Z0-9]+\..+'
    Default: datakeeper.local
    Description: Fully qualified domain name (FQDN) e.g. example.com
    MaxLength: '25'
    MinLength: '3'
    Type: String
  DomainMemberSGID:
    Description: ID of the Domain Member Security Group (e.g., sg-7f16e910)
    Type: AWS::EC2::SecurityGroup::Id
  DomainNetBIOSName:
    AllowedPattern: '[a-zA-Z0-9]+'
    Default: DATAKEEPER
    Description: NetBIOS name of the domain (up to 15 characters) for users of earlier
      versions of Windows e.g. EXAMPLE
    MaxLength: '15'
    MinLength: '1'
    Type: String
  KeyPairName:
    Description: Public/private key pairs allow you to securely connect to your instance
      after it launches
    Type: AWS::EC2::KeyPair::KeyName
  PrivateSubnet1CIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.0.0/19
    Description: CIDR block for private subnet 1 located in Availability Zone 1.
    Type: String
  PrivateSubnet1ID:
    Description: ID of the private subnet 1 in Availability Zone 1 (e.g., subnet-a0246dcd)
    Type: AWS::EC2::Subnet::Id
  PrivateSubnet2CIDR:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(1[6-9]|2[0-8]))$
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/16-28
    Default: 10.0.32.0/19
    Description: CIDR block for private subnet 2 located in Availability Zone 2.
    Type: String
  PrivateSubnet2ID:
    Description: ID of the private subnet 2 in Availability Zone 2 (e.g., subnet-a0246dcd)
    Type: AWS::EC2::Subnet::Id
  QSS3BucketName:
    AllowedPattern: ^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$
    ConstraintDescription: Quick Start bucket name can include numbers, lowercase
      letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen
      (-).
    Default: aws-quickstart
    Description: S3 bucket name for the Quick Start assets. Quick Start bucket name
      can include numbers, lowercase letters, uppercase letters, and hyphens (-).
      It cannot start or end with a hyphen (-).
    Type: String
  QSS3BucketRegion:
    Default: 'us-east-1'
    Description: 'The AWS Region where the Quick Start S3 bucket (QSS3BucketName) is hosted. When using your own bucket, you must specify this value.'
    Type: String
  QSS3KeyPrefix:
    AllowedPattern: ^[0-9a-zA-Z-/]*$
    ConstraintDescription: Quick Start key prefix can include numbers, lowercase letters,
      uppercase letters, hyphens (-), and forward slash (/).
    Default: quickstart-sios-datakeeper/
    Description: S3 key prefix for the Quick Start assets. Quick Start key prefix
      can include numbers, lowercase letters, uppercase letters, hyphens (-), and
      forward slash (/).
    Type: String
  SIOSLicenseKeyFtpURL:
    Default: 'override'
    Description: URL used to obtain license key for SIOS DataKeeper software.
    Type: String
  SQLServerVersion:
    AllowedValues:
      - None
      - 2014SP1
    Default: 2014SP1
    Description: Version of MS SQL Server to install. Select 'None' if SQL Server
      is not desired.
    Type: String
  SQLServiceAccount:
    AllowedPattern: '[a-zA-Z0-9]*'
    Default: sqlsa
    Description: User name for the SQL Server Service Account. This Account is a Domain
      User.
    MaxLength: '25'
    MinLength: '5'
    Type: String
  SQLServiceAccountPassword:
    AllowedPattern: (?=^(?![\s\S]))|(?=^.{6,255}$)((?=.*\d)(?=.*[A-Z])(?=.*[a-z])|(?=.*\d)(?=.*[^A-Za-z0-9])(?=.*[a-z])|(?=.*[^A-Za-z0-9])(?=.*[A-Z])(?=.*[a-z])|(?=.*\d)(?=.*[A-Z])(?=.*[^A-Za-z0-9]))^.*
    Description: Password for the SQL Service account. Must be at least 8 characters
      containing letters, numbers and symbols. May be left blank if SQL Server is
      not desired.
    MaxLength: '32'
    MinLength: '0'
    NoEcho: 'true'
    Type: String
  VPCID:
    Description: ID of the VPC (e.g., vpc-0343606e)
    Type: AWS::EC2::VPC::Id
  Volume1Iops:
    Default: 1000
    Description: Iops for the SQL Data drive (Only used when volume type is io1)
    MaxValue: 20000
    MinValue: 100
    Type: Number
  Volume1Size:
    Default: 100
    Description: Volume size for the SQL Data drive
    MaxValue: 16000
    MinValue: 100
    Type: Number
  Volume1Type:
    AllowedValues:
      - gp2
      - io1
    Default: gp2
    Description: Volume type for the SQL Data drive
    Type: String
  WSFCNode1InstanceType:
    AllowedValues:
      - m3.xlarge
      - m3.2xlarge
      - c3.xlarge
      - c3.2xlarge
      - c3.4xlarge
      - g2.2xlarge
      - r3.xlarge
      - r3.2xlarge
      - r3.4xlarge
      - d2.xlarge
      - d2.2xlarge
      - d2.4xlarge
      - d2.8xlarge
      - i2.xlarge
      - i2.2xlarge
      - i2.4xlarge
      - h1.2xlarge
      - h1.4xlarge
      - h1.8xlarge
      - h1.16xlarge
      - i3.large
      - i3.xlarge
      - i3.2xlarge
      - i3.4xlarge
      - i3.8xlarge
      - i3.16xlarge
      - x1.16xlarge
      - x1.32xlarge
      - x1e.xlarge
      - x1e.2xlarge
      - x1e.4xlarge
      - x1e.8xlarge
      - x1e.16xlarge
      - x1e.32xlarge
    ConstraintDescription: Only EBS Optimized instance types allowed
    Default: i3.xlarge
    Description: Amazon EC2 instance type for the 1st WSFC Node
    Type: String
  WSFCNode1NetBIOSName:
    AllowedPattern: '[a-zA-Z0-9]+'
    Default: WSFCNode1
    Description: NetBIOS name of the first WSFC Node (up to 15 characters)
    MaxLength: 15
    MinLength: 1
    Type: String
  WSFCNode1PrivateIP1:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$
    Default: 10.0.0.100
    Description: Primary private IP for the first WSFC Node located in Availability
      Zone 1
    Type: String
  WSFCNode1PrivateIP2:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$
    Default: 10.0.0.101
    Description: Secondary private IP for WSFC cluster on first WSFC Node
    Type: String
  WSFCNode1PrivateIP3:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$
    Default: 10.0.0.102
    Description: Third private IP for SQL Server Network Name on first WSFC Node
    Type: String
  WSFCNode2InstanceType:
    AllowedValues:
      - m3.xlarge
      - m3.2xlarge
      - c3.xlarge
      - c3.2xlarge
      - c3.4xlarge
      - g2.2xlarge
      - r3.xlarge
      - r3.2xlarge
      - r3.4xlarge
      - d2.xlarge
      - d2.2xlarge
      - d2.4xlarge
      - d2.8xlarge
      - i2.xlarge
      - i2.2xlarge
      - i2.4xlarge
      - h1.2xlarge
      - h1.4xlarge
      - h1.8xlarge
      - h1.16xlarge
      - i3.large
      - i3.xlarge
      - i3.2xlarge
      - i3.4xlarge
      - i3.8xlarge
      - i3.16xlarge
      - x1.16xlarge
      - x1.32xlarge
      - x1e.xlarge
      - x1e.2xlarge
      - x1e.4xlarge
      - x1e.8xlarge
      - x1e.16xlarge
      - x1e.32xlarge
    ConstraintDescription: Only EBS Optimized instance types allowed
    Default: i3.xlarge
    Description: Amazon EC2 instance type for the 1st WSFC Node
    Type: String
  WSFCNode2NetBIOSName:
    AllowedPattern: '[a-zA-Z0-9]+'
    Default: WSFCNode2
    Description: NetBIOS name of the second WSFC Node (up to 15 characters)
    MaxLength: 15
    MinLength: 1
    Type: String
  WSFCNode2PrivateIP1:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$
    Default: 10.0.32.100
    Description: Primary private IP for the second WSFC Node located in Availability
      Zone 2
    Type: String
  WSFCNode2PrivateIP2:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$
    Default: 10.0.32.101
    Description: Secondary private IP for WSFC cluster on second WSFC Node
    Type: String
  WSFCNode2PrivateIP3:
    AllowedPattern: ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$
    Default: 10.0.32.102
    Description: Third private IP for SQL Server Network Name on second WSFC Node
    Type: String
Conditions:
  ByolAmiCondition: !Not
    - !Equals
      - !Ref AMIType
      - PAYG
  SQLInstallCondition: !Not
    - !Equals
      - !Ref SQLServerVersion
      - None
  UsingDefaultBucket: !Equals [!Ref QSS3BucketName, 'aws-quickstart']
Rules:
  SubnetsInVPC:
    Assertions:
      - Assert: !EachMemberIn
          - !ValueOfAll
            - AWS::EC2::Subnet::Id
            - VpcId
          - !RefAll AWS::EC2::VPC::Id
        AssertDescription: All subnets must be in the VPC
Mappings:
  BYOLNameMap:
    WS2012R2:
      Code: SDKCEWIN2012R2BYOL
    WS2016:
      Code: SDKCEWIN2016BYOL
    WS2019:
      Code: SDKCEWIN2019BYOL
  PAYGNameMap:
    WS2012R2:
      Code: SDKCEWIN2012R2
    WS2016:
      Code: SDKCEWIN2016
    WS2019:
      Code: SDKCEWIN2019
  AWSAMIRegionMap:
    ap-northeast-2:
      SDKCEWIN2012R2: ami-07928a8c006fe303a
      SDKCEWIN2012R2BYOL: ami-0a92c17ba5e2851bf
      SDKCEWIN2016: ami-0a1d90ce2b5bdc2fe
      SDKCEWIN2016BYOL: ami-0972029e9a87f980f
      SDKCEWIN2019: ami-0ce5c9d89d0705843
      SDKCEWIN2019BYOL: ami-0e09cf47876c04f52
    ap-south-1:
      SDKCEWIN2012R2: ami-0d9d6e00c6fb92e93
      SDKCEWIN2012R2BYOL: ami-0735037b160a3cae9
      SDKCEWIN2016: ami-0be813e72ad871bd3
      SDKCEWIN2016BYOL: ami-024c358742ccdb60b
      SDKCEWIN2019: ami-01f3c50e7b89ec226
      SDKCEWIN2019BYOL: ami-08c85826b1db236b7
    ap-southeast-1:
      SDKCEWIN2012R2: ami-0763746dd6a72ddb7
      SDKCEWIN2012R2BYOL: ami-0e6c7a710e1d1c0df
      SDKCEWIN2016: ami-0fb06e01c5d67db60
      SDKCEWIN2016BYOL: ami-0acd14756c0d779ed
      SDKCEWIN2019: ami-0cb104063affb4fe6
      SDKCEWIN2019BYOL: ami-02d15ea9750a8c395
    ap-southeast-2:
      SDKCEWIN2012R2: ami-051292277ff1b45c2
      SDKCEWIN2012R2BYOL: ami-09abf002ffcb7e348
      SDKCEWIN2016: ami-0465e45d3f47747cd
      SDKCEWIN2016BYOL: ami-06d4a24eb85e99a63
      SDKCEWIN2019: ami-05a078c2f361bc035
      SDKCEWIN2019BYOL: ami-09ee28a8c9b947743
    ca-central-1:
      SDKCEWIN2012R2: ami-025fba150fdd82096
      SDKCEWIN2012R2BYOL: ami-0b683097cdaeef370
      SDKCEWIN2016: ami-048a88824d00b119e
      SDKCEWIN2016BYOL: ami-05f3589e77a1fbf9f
      SDKCEWIN2019: ami-060d63292eab6e9d7
      SDKCEWIN2019BYOL: ami-000e23b86f292a2d9
    eu-central-1:
      SDKCEWIN2012R2: ami-0fc1550164fbf4f75
      SDKCEWIN2012R2BYOL: ami-088b5b7146a577a28
      SDKCEWIN2016: ami-027490ddf0141e58a
      SDKCEWIN2016BYOL: ami-009032b7da9f5a4b4
      SDKCEWIN2019: ami-0b92f7a37a643b5c7
      SDKCEWIN2019BYOL: ami-0201d5f63e9759bf0
    eu-north-1:
      SDKCEWIN2012R2: ami-037bc1e51c2bb879f
      SDKCEWIN2012R2BYOL: ami-02c13a08f6ea82a16
      SDKCEWIN2016: ami-072ef4b15422426f4
      SDKCEWIN2016BYOL: ami-0475456f8f6e06143
      SDKCEWIN2019: ami-05b51ab76221d3b4f
      SDKCEWIN2019BYOL: ami-07581a104a1c6ce1f
    eu-west-1:
      SDKCEWIN2012R2: ami-0dd11ac7a41745296
      SDKCEWIN2012R2BYOL: ami-031950dfd3675ccff
      SDKCEWIN2016: ami-07c52aff65241c0c3
      SDKCEWIN2016BYOL: ami-09609dd95ff5c61aa
      SDKCEWIN2019: ami-07555179336d4550d
      SDKCEWIN2019BYOL: ami-00a83ae149a77f641
    eu-west-2:
      SDKCEWIN2012R2: ami-01b6be5ca3a1124ac
      SDKCEWIN2012R2BYOL: ami-0d8f6277a5c1f0d62
      SDKCEWIN2016: ami-05195be29d8ee2854
      SDKCEWIN2016BYOL: ami-028cb888d2a5dd362
      SDKCEWIN2019: ami-08b873c17aff89e73
      SDKCEWIN2019BYOL: ami-0854beaa3d149b2c5
    eu-west-3:
      SDKCEWIN2012R2: ami-0c3a4cf5d130070bd
      SDKCEWIN2012R2BYOL: ami-012950cbb8a44ca73
      SDKCEWIN2016: ami-0f9fd59b90bb0190f
      SDKCEWIN2016BYOL: ami-0c767c559998fa967
      SDKCEWIN2019: ami-0be3e3de06e9c1fd5
      SDKCEWIN2019BYOL: ami-0e20e04dad587b565
    sa-east-1:
      SDKCEWIN2012R2: ami-081b645fab2e17614
      SDKCEWIN2012R2BYOL: ami-00e270f394dc4ec00
      SDKCEWIN2016: ami-003dab61d85f67430
      SDKCEWIN2016BYOL: ami-0ea73dbb0dc19554e
      SDKCEWIN2019: ami-04d16250b72d5c604
      SDKCEWIN2019BYOL: ami-04e8a1aa8fd1ef311
    us-east-1:
      SDKCEWIN2012R2: ami-021d6a6c75d311308
      SDKCEWIN2012R2BYOL: ami-0689a52ee08c38381
      SDKCEWIN2016: ami-0b17e311adc04adb7
      SDKCEWIN2016BYOL: ami-014bc9f567e61176c
      SDKCEWIN2019: ami-0a7705a3f66615c98
      SDKCEWIN2019BYOL: ami-0aae9f95c391a04d1
    us-east-2:
      SDKCEWIN2012R2: ami-096ce1dbbd3b78f01
      SDKCEWIN2012R2BYOL: ami-019d654227e6b98b9
      SDKCEWIN2016: ami-0049509ded61fce77
      SDKCEWIN2016BYOL: ami-0e9d913f7e748d2f2
      SDKCEWIN2019: ami-0deba2c9caf93d78d
      SDKCEWIN2019BYOL: ami-08cc24ab224b5c2ef
    us-west-1:
      SDKCEWIN2012R2: ami-05f35974dd2f0b602
      SDKCEWIN2012R2BYOL: ami-0a7f0c12d9df5f767
      SDKCEWIN2016: ami-0f4bea4dfaa065610
      SDKCEWIN2016BYOL: ami-0c0c1b97a09d710a3
      SDKCEWIN2019: ami-006927c26f471be40
      SDKCEWIN2019BYOL: ami-0b0b0e526ed4c92a1
    us-west-2:
      SDKCEWIN2012R2: ami-083c20e5abe9a19f2
      SDKCEWIN2012R2BYOL: ami-0c7b0673875975d42
      SDKCEWIN2016: ami-03facdcdc1306a95b
      SDKCEWIN2016BYOL: ami-07c32ea233f30d83e
      SDKCEWIN2019: ami-0bf81510c78e24fc3
      SDKCEWIN2019BYOL: ami-02479556ab78c0e30
Resources:
  QuickStartLogs:
    Type: AWS::Logs::LogGroup
    Properties: 
      LogGroupName: !Sub /aws/Quick_Start/${AWS::StackName}
      RetentionInDays: 30
  AWSQuickstartSIOSDKCE:
    Type: AWS::SSM::Document
    Properties:
      DocumentType: Automation
      Content:
        schemaVersion: '0.3'
        description: Deploy SIOS DKCE with SSM Automation
        assumeRole: '{{AutomationAssumeRole}}'
        parameters: 
          AMIType:
           default: "PAYG"
           description: AMI type for SIOS license purposes.
           type: String
          OSVersion: 
           default: WS2012R2
           description: Windows Server OS version to use for cluster nodes.
           type: String
          ADServer1NetBIOSName:
           default: SIOSDC1
           description: NetBIOS name of the first Active Directory server (up to 15 characters)
           type: String
          ADServer1PrivateIP: 
           default: 10.0.0.10
           description: Fixed private IP for the first Active Directory server located in Availability Zone 1
           type: String
          ADServer2NetBIOSName:
           default: SIOSDC2
           description: NetBIOS name of the second Active Directory server (up to 15 characters)
           type: String
          ADServer2PrivateIP:
           default: 10.0.32.10
           description: Fixed private IP for the second Active Directory server located in Availability Zone 2
           type: String
          DomainAdminPassword: 
           description: Password for the domain admin user. Must be at least 8 characters containing letters numbers and symbols
           type: String
          DomainAdminUser: 
           default: siosadmin
           description: User name for the account that will be used as Domain Administrator. This is separate from the default "Administrator" account
           type: String
          DomainDNSName: 
           default: datakeeper.local
           description: Fully qualified domain name (FQDN) e.g. example.com
           type: String
          DomainNetBIOSName: 
           default: DATAKEEPER
           description: NetBIOS name of the domain (up to 15 characters) for users of earlier versions of Windows e.g. EXAMPLE
           type: String
          PrivateSubnet1CIDR:
           default: 10.0.0.0/19
           description: CIDR block for private subnet 1 located in Availability Zone 1.
           type: String
          PrivateSubnet2CIDR: 
           default: 10.0.32.0/19
           description: CIDR block for private subnet 2 located in Availability Zone 2.
           type: String
          SIOSLicenseKeyFtpURL: 
           default: 'override'
           description: URL used to obtain license key for SIOS DataKeeper software.
           type: String
          SQLServerVersion:
           default: 2014SP1
           description: Version of MS SQL Server to install. Select 'None' if SQL Server is not desired.
           type: String
          SQLServiceAccount: 
           default: sqlsa
           description: User name for the SQL Server Service Account. This Account is a Domain User.
           type: String
          SQLServiceAccountPassword: 
           description: Password for the SQL Service account. Must be at least 8 characters containing letters numbers and symbols. May be left blank if SQL Server is not desired.
           type: String
          ClusterName: 
           default: WSFCCluster1
           description: NetBIOS name of the WSFC Cluster
           type: String
          WSFCNode1NetBIOSName:
           default: WSFCNode1
           description: NetBIOS name of the first WSFC Node (up to 15 characters)
           type: String
          WSFCNode1PrivateIP1:
           default: 10.0.0.100
           description: Primary private IP for the first WSFC Node located in Availability Zone 1
           type: String
          WSFCNode1PrivateIP2:
           default: 10.0.0.101
           description: Secondary private IP for WSFC cluster on first WSFC Node
           type: String
          WSFCNode1PrivateIP3: 
           default: 10.0.0.102
           description: Third private IP for SQL Server Network Name on first WSFC Node
           type: String
          WSFCNode2NetBIOSName: 
           default: WSFCNode2
           description: NetBIOS name of the second WSFC Node (up to 15 characters)
           type: String
          WSFCNode2PrivateIP1:
           default: 10.0.32.100
           description: Primary private IP for the second WSFC Node located in Availability Zone 2
           type: String
          WSFCNode2PrivateIP2: 
           default: 10.0.32.101
           description: Secondary private IP for WSFC cluster on second WSFC Node
           type: String
          WSFCNode2PrivateIP3:
           default: 10.0.32.102
           description: Third private IP for SQL Server Network Name on second WSFC Node
           type: String
          QSS3BucketName:
            default: aws-quickstart
            description: S3 bucket name for the Quick Start assets. Quick Start bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-).
            type: String
          QSS3BucketRegion:
            default: us-east-1
            description: The AWS Region where the Quick Start S3 bucket (QSS3BucketName) is hosted. When using your own bucket, you must specify this value.
            type: String
          QSS3KeyPrefix:
            default: quickstart-microsoft-activedirectory/
            description: S3 key prefix for the Quick Start assets. Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/).
            type: String
          StackName:
            default: ''
            description: Stack Name Input for cfn resource signal
            type: String
          AutomationAssumeRole:
            default: ''
            description: (Optional) The ARN of the role that allows Automation to perform the actions on your behalf.
            type: String
        mainSteps:
        - name: wsfcnodesInstanceId
          action: aws:executeAwsApi
          onFailure: step:signalfailure
          inputs:
            Service: ec2
            Api: DescribeInstances
            Filters:  
            - Name: tag:Name
              Values: [ '{{WSFCNode1NetBIOSName}}','{{WSFCNode2NetBIOSName}}' ]
            - Name: instance-state-name
              Values: [ 'running' ]
          outputs:
          - Name: InstanceIds
            Selector: $.Reservations..Instances..InstanceId
            Type: StringList
        - name: wsfcnode1InstanceId
          action: aws:executeAwsApi
          onFailure: step:signalfailure
          inputs:
            Service: ec2
            Api: DescribeInstances
            Filters:  
            - Name: tag:Name
              Values: [ '{{WSFCNode1NetBIOSName}}' ]
            - Name: instance-state-name
              Values: [ 'running' ]
          outputs:
          - Name: InstanceId
            Selector: $.Reservations[0].Instances[0].InstanceId
            Type: String
        - name: wsfcnode2InstanceId
          action: aws:executeAwsApi
          onFailure: step:signalfailure
          inputs:
            Service: ec2
            Api: DescribeInstances
            Filters:  
            - Name: tag:Name
              Values: [ '{{WSFCNode2NetBIOSName}}' ]
            - Name: instance-state-name
              Values: [ 'running' ]
          outputs:
          - Name: InstanceId
            Selector: $.Reservations[0].Instances[0].InstanceId
            Type: String
        - name: dc1InstanceId
          action: aws:executeAwsApi
          onFailure: step:signalfailure
          inputs:
            Service: ec2
            Api: DescribeInstances
            Filters:  
            - Name: tag:Name
              Values: [ '{{ADServer1NetBIOSName}}' ]
            - Name: instance-state-name
              Values: [ 'running' ]
          outputs:
          - Name: InstanceId
            Selector: $.Reservations[0].Instances[0].InstanceId
            Type: String
        - name: dc2InstanceId
          action: aws:executeAwsApi
          onFailure: step:signalfailure
          inputs:
            Service: ec2
            Api: DescribeInstances
            Filters:  
            - Name: tag:Name
              Values: [ '{{ADServer2NetBIOSName}}' ]
            - Name: instance-state-name
              Values: [ 'running' ]
          outputs:
          - Name: InstanceId
            Selector: $.Reservations[0].Instances[0].InstanceId
            Type: String
        - name: OSVersionBranch1
          action: aws:branch
          inputs:
            Choices:
            - NextStep: InstallDSCModules
              Variable: "{{OSVersion}}"
              StringEquals: WS2019
            - NextStep: InstallDSCModules
              Variable: "{{OSVersion}}"
              StringEquals: WS2016
            - NextStep: 2012R2InstallWMF51
              Variable: "{{OSVersion}}"
              StringEquals: WS2012R2
        - name: 2012R2InstallWMF51
          action: aws:runCommand
          onFailure: step:signalfailure
          inputs:
            DocumentName: AWS-RunRemoteScript
            InstanceIds:
              - '{{wsfcnodesInstanceId.InstanceIds}}'
            CloudWatchOutputConfig:
              CloudWatchOutputEnabled: 'true'
              CloudWatchLogGroupName: !Ref QuickStartLogs
            Parameters:
              sourceType: S3
              sourceInfo: 
                !Sub 
                  - '{"path": "https://${S3Bucket}.s3.${S3Region}.amazonaws.com/{{QSS3KeyPrefix}}submodules/quickstart-microsoft-utilities/scripts/Install-WMF51.ps1"}'
                  - S3Bucket: !If
                      - UsingDefaultBucket
                      - !Sub '${QSS3BucketName}-${AWS::Region}'
                      - !Ref QSS3BucketName
                    S3Region: !If 
                      - UsingDefaultBucket
                      - !Ref AWS::Region
                      - !Ref QSS3BucketRegion
              commandLine: ./Install-WMF51.ps1
        - name: 2012R2InstallDSC
          action: aws:runCommand
          onFailure: step:signalfailure
          nextStep: InstallDSCModules
          inputs:
            DocumentName: AWS-RunPowerShellScript
            InstanceIds: 
              - '{{wsfcnodesInstanceId.InstanceIds}}'
            CloudWatchOutputConfig:
              CloudWatchOutputEnabled: 'true'
              CloudWatchLogGroupName: !Ref QuickStartLogs
            Parameters:
              commands: 
                - |
                   Install-WindowsFeature -Name DSC-Service
                   Set-Item -Path WSMan:\localhost\MaxEnvelopeSizeKb -Value 2048
                   Set-WSManQuickConfig
                   $PSVersion = $PSVersionTable.PSVersion.Major
                   if ($PSVersion -eq '4') {
                     'returning 3010, should continue after reboot'
                      exit 3010
                   } else {'Next Step'}
        - name: InstallDSCModules
          action: aws:runCommand
          onFailure: step:signalfailure
          inputs:
            DocumentName: AWS-RunRemoteScript
            InstanceIds:
              - '{{wsfcnodesInstanceId.InstanceIds}}'
            CloudWatchOutputConfig:
              CloudWatchOutputEnabled: 'true'
              CloudWatchLogGroupName: !Ref QuickStartLogs
            Parameters:
              sourceType: S3
              sourceInfo: 
                !Sub 
                  - '{"path": "https://${S3Bucket}.s3.${S3Region}.amazonaws.com/{{QSS3KeyPrefix}}scripts/install-dsc-modules.ps1"}'
                  - S3Bucket: !If
                      - UsingDefaultBucket
                      - !Sub '${QSS3BucketName}-${AWS::Region}'
                      - !Ref QSS3BucketName
                    S3Region: !If 
                      - UsingDefaultBucket
                      - !Ref AWS::Region
                      - !Ref QSS3BucketRegion
              commandLine: ./install-dsc-modules.ps1
        - name: LCMConfig
          action: aws:runCommand
          onFailure: step:signalfailure
          inputs:
            DocumentName: AWS-RunRemoteScript
            InstanceIds:
              - '{{wsfcnodesInstanceId.InstanceIds}}'
            CloudWatchOutputConfig:
              CloudWatchOutputEnabled: 'true'
              CloudWatchLogGroupName: !Ref QuickStartLogs
            Parameters:
              sourceType: S3
              sourceInfo: 
                !Sub 
                  - '{"path": "https://${S3Bucket}.s3.${S3Region}.amazonaws.com/{{QSS3KeyPrefix}}scripts/LCM-Config.ps1"}'
                  - S3Bucket: !If
                      - UsingDefaultBucket
                      - !Sub '${QSS3BucketName}-${AWS::Region}'
                      - !Ref QSS3BucketName
                    S3Region: !If 
                      - UsingDefaultBucket
                      - !Ref AWS::Region
                      - !Ref QSS3BucketRegion
              commandLine: ./LCM-Config.ps1
        - name: CopyQSModule
          action: aws:runCommand
          maxAttempts: 999
          onFailure: step:signalfailure
          inputs:
            DocumentName: AWS-RunPowerShellScript
            InstanceIds: 
              - '{{wsfcnodesInstanceId.InstanceIds}}'
            CloudWatchOutputConfig:
              CloudWatchOutputEnabled: 'true'
              CloudWatchLogGroupName: !Ref QuickStartLogs
            Parameters:
              commands: 
                - Copy-S3Object -Bucket {{QSS3BucketName}} -key {{QSS3KeyPrefix}}submodules/quickstart-microsoft-utilities/modules/AWSQuickStart.zip -LocalFile C:\cfn\modules\AWSQuickStart.zip
        - name: UnzipQSModule
          action: aws:runCommand
          onFailure: step:signalfailure
          inputs:
            DocumentName: AWS-RunRemoteScript
            InstanceIds:
              - '{{wsfcnodesInstanceId.InstanceIds}}'
            CloudWatchOutputConfig:
              CloudWatchOutputEnabled: 'true'
              CloudWatchLogGroupName: !Ref QuickStartLogs
            Parameters:
              sourceType: S3
              sourceInfo: 
                !Sub 
                  - '{"path": "https://${S3Bucket}.s3.${S3Region}.amazonaws.com/{{QSS3KeyPrefix}}submodules/quickstart-microsoft-utilities/scripts/Unzip-Archive.ps1"}'
                  - S3Bucket: !If
                      - UsingDefaultBucket
                      - !Sub '${QSS3BucketName}-${AWS::Region}'
                      - !Ref QSS3BucketName
                    S3Region: !If 
                      - UsingDefaultBucket
                      - !Ref AWS::Region
                      - !Ref QSS3BucketRegion
              commandLine: ./Unzip-Archive.ps1 -Source 'C:\\cfn\\modules\\AWSQuickStart.zip' -Destination 'C:\\Windows\\system32\\WindowsPowerShell\\v1.0\\Modules\\'
        - name: EnableCredSSP
          action: aws:runCommand
          onFailure: step:signalfailure
          inputs:
            DocumentName: AWS-RunPowerShellScript
            InstanceIds: 
              - '{{wsfcnodesInstanceId.InstanceIds}}'
            CloudWatchOutputConfig:
              CloudWatchOutputEnabled: 'true'
              CloudWatchLogGroupName: !Ref QuickStartLogs
            Parameters:
              commands: 
                - Copy-S3Object -Bucket {{QSS3BucketName}} -key {{QSS3KeyPrefix}}submodules/quickstart-microsoft-utilities/scripts/EnableCredSsp.ps1 -LocalFile C:\cfn\scripts\EnableCredSsp.ps1
        - name: EnableCredSSPReboot
          action: aws:runCommand
          onFailure: step:signalfailure
          inputs:
            DocumentName: AWS-RunPowerShellScript
            InstanceIds: 
              - '{{wsfcnodesInstanceId.InstanceIds}}'
            CloudWatchOutputConfig:
              CloudWatchOutputEnabled: 'true'
              CloudWatchLogGroupName: !Ref QuickStartLogs
            Parameters:
              commands: 
                - |
                   $CredSSPEnabled = Test-Path 'HKLM:\SOFTWARE\Policies\Microsoft\Windows\CredentialsDelegation'
                   if ($CredSSPEnabled -eq $false) {
                     C:\cfn\scripts\EnableCredSsp.ps1
                     'returning 3010, should continue after reboot'
                      exit 3010
                   } else {'Next Step'}
        - name: QSModuleStart
          action: aws:runCommand
          onFailure: step:signalfailure
          inputs:
            DocumentName: AWS-RunPowerShellScript
            InstanceIds: 
              - '{{wsfcnodesInstanceId.InstanceIds}}'
            CloudWatchOutputConfig:
              CloudWatchOutputEnabled: 'true'
              CloudWatchLogGroupName: !Ref QuickStartLogs
            Parameters:
              commands: 
                - New-AWSQuickStartResourceSignal -Stack {{StackName}} -Resource SSMWaitCondition -Region {{global:REGION}}
        - name: SetDns
          action: aws:runCommand
          onFailure: step:signalfailure
          inputs:
            DocumentName: AWS-RunRemoteScript
            InstanceIds:
              - '{{wsfcnodesInstanceId.InstanceIds}}'
            CloudWatchOutputConfig:
              CloudWatchOutputEnabled: 'true'
              CloudWatchLogGroupName: !Ref QuickStartLogs
            Parameters:
              sourceType: S3
              sourceInfo: 
                !Sub 
                  - '{"path": "https://${S3Bucket}.s3.${S3Region}.amazonaws.com/{{QSS3KeyPrefix}}submodules/quickstart-microsoft-utilities/scripts/Set-Dns.ps1"}'
                  - S3Bucket: !If
                      - UsingDefaultBucket
                      - !Sub '${QSS3BucketName}-${AWS::Region}'
                      - !Ref QSS3BucketName
                    S3Region: !If 
                      - UsingDefaultBucket
                      - !Ref AWS::Region
                      - !Ref QSS3BucketRegion
              commandLine: ./Set-Dns.ps1 -ns1 {{ADServer1PrivateIP}} -ns2 {{ADServer2PrivateIP}}
        - name: OSVersionBranch2
          action: aws:branch
          inputs:
            Choices:
            - NextStep: CopyDriveLetterMapping
              Variable: "{{OSVersion}}"
              StringEquals: WS2019
            - NextStep: CopyDriveLetterMapping
              Variable: "{{OSVersion}}"
              StringEquals: WS2016
            - NextStep: DomainJoin
              Variable: "{{OSVersion}}"
              StringEquals: WS2012R2
        - name: CopyDriveLetterMapping
          action: aws:runCommand
          onFailure: step:signalfailure
          inputs:
            DocumentName: AWS-RunPowerShellScript
            InstanceIds: 
              - '{{wsfcnodesInstanceId.InstanceIds}}'
            CloudWatchOutputConfig:
              CloudWatchOutputEnabled: 'true'
              CloudWatchLogGroupName: !Ref QuickStartLogs
            Parameters:
              commands: 
                - |
                   Copy-S3Object -Bucket {{QSS3BucketName}} -key {{QSS3KeyPrefix}}scripts/DriveLetterMappingConfig.json -LocalFile C:\ProgramData\Amazon\EC2-Windows\Launch\Config\DriveLetterMappingConfig.json
        - name: InitializeDisk
          action: aws:runCommand
          onFailure: step:signalfailure
          inputs:
            DocumentName: AWS-RunPowerShellScript
            InstanceIds: 
              - '{{wsfcnodesInstanceId.InstanceIds}}'
            CloudWatchOutputConfig:
              CloudWatchOutputEnabled: 'true'
              CloudWatchLogGroupName: !Ref QuickStartLogs
            Parameters:
              commands: 
                - |
                   C:\ProgramData\Amazon\EC2-Windows\Launch\Scripts\InitializeDisks.ps1
        - name: DomainJoin
          action: aws:runCommand
          onFailure: step:signalfailure
          inputs:
            DocumentName: AWS-RunRemoteScript
            InstanceIds:
              - '{{wsfcnodesInstanceId.InstanceIds}}'
            CloudWatchOutputConfig:
              CloudWatchOutputEnabled: 'true'
              CloudWatchLogGroupName: !Ref QuickStartLogs
            Parameters:
              sourceType: S3
              sourceInfo: 
                !Sub 
                  - '{"path": "https://${S3Bucket}.s3.${S3Region}.amazonaws.com/{{QSS3KeyPrefix}}scripts/DomainJoin.ps1"}'
                  - S3Bucket: !If
                      - UsingDefaultBucket
                      - !Sub '${QSS3BucketName}-${AWS::Region}'
                      - !Ref QSS3BucketName
                    S3Region: !If 
                      - UsingDefaultBucket
                      - !Ref AWS::Region
                      - !Ref QSS3BucketRegion
              commandLine: ./DomainJoin.ps1 -DomainNetBIOSName {{DomainNetBIOSName}} -DomainDNSName {{DomainDNSName}} -UserName {{DomainAdminUser}} -Password {{DomainAdminPassword}}
        - name: DomainJoinApply
          action: aws:runCommand
          onFailure: step:signalfailure
          inputs:
            DocumentName: AWS-RunPowerShellScript
            InstanceIds: 
              - '{{wsfcnodesInstanceId.InstanceIds}}'
            CloudWatchOutputConfig:
              CloudWatchOutputEnabled: 'true'
              CloudWatchLogGroupName: !Ref QuickStartLogs
            Parameters:
              commands: 
                - |     
                   function DscStatusCheck () {
                       $LCMState = (Get-DscLocalConfigurationManager).LCMState
                       if ($LCMState -eq 'PendingConfiguration' -Or $LCMState -eq 'PendingReboot') {
                           'returning 3010, should continue after reboot'
                           exit 3010
                       } else {
                         'Completed'
                       }
                   }
                   Start-DscConfiguration 'C:\AWSQuickstart\DomainJoin' -Wait -Verbose -Force
                   DscStatusCheck
        - name: Installnetcore
          action: aws:runCommand
          maxAttempts: 999
          onFailure: step:signalfailure
          inputs:
            DocumentName: AWS-RunRemoteScript
            InstanceIds:
            - '{{wsfcnodesInstanceId.InstanceIds}}'
            CloudWatchOutputConfig:
              CloudWatchOutputEnabled: 'true'
              CloudWatchLogGroupName: !Ref QuickStartLogs
            Parameters:
              sourceType: S3
              sourceInfo: 
                !Sub 
                  - '{"path": "https://${S3Bucket}.s3.${S3Region}.amazonaws.com/{{QSS3KeyPrefix}}scripts/Install-NETFrameworkCore.ps1"}'
                  - S3Bucket: !If
                      - UsingDefaultBucket
                      - !Sub '${QSS3BucketName}-${AWS::Region}'
                      - !Ref QSS3BucketName
                    S3Region: !If 
                      - UsingDefaultBucket
                      - !Ref AWS::Region
                      - !Ref QSS3BucketRegion
              commandLine: ./Install-NETFrameworkCore.ps1
        - name: OpenWSFCPorts
          action: aws:runCommand
          onFailure: step:signalfailure
          inputs:
            DocumentName: AWS-RunRemoteScript
            InstanceIds:
              - '{{wsfcnodesInstanceId.InstanceIds}}'
            CloudWatchOutputConfig:
              CloudWatchOutputEnabled: 'true'
              CloudWatchLogGroupName: !Ref QuickStartLogs
            Parameters:
              sourceType: S3
              sourceInfo: 
                !Sub 
                  - '{"path": "https://${S3Bucket}.s3.${S3Region}.amazonaws.com/{{QSS3KeyPrefix}}scripts/OpenWSFCPorts.ps1"}'
                  - S3Bucket: !If
                      - UsingDefaultBucket
                      - !Sub '${QSS3BucketName}-${AWS::Region}'
                      - !Ref QSS3BucketName
                    S3Region: !If 
                      - UsingDefaultBucket
                      - !Ref AWS::Region
                      - !Ref QSS3BucketRegion
              commandLine: ./OpenWSFCPorts.ps1
        - name: ByolAmiBranch
          action: aws:branch
          inputs:
            Choices:
            - NextStep: CreateJob
              Variable: '{{AMIType}}'
              StringEquals: PAYG
            - NextStep: DownloadDKCELicense
              Variable: '{{AMIType}}'
              StringEquals: BYOL
        - name: DownloadDKCELicense
          action: aws:runCommand
          onFailure: step:signalfailure
          inputs:
            DocumentName: AWS-RunRemoteScript
            InstanceIds:
              - '{{wsfcnodesInstanceId.InstanceIds}}'
            CloudWatchOutputConfig:
              CloudWatchOutputEnabled: 'true'
              CloudWatchLogGroupName: !Ref QuickStartLogs
            Parameters:
              sourceType: S3
              sourceInfo: 
                !Sub 
                  - '{"path": "https://${S3Bucket}.s3.${S3Region}.amazonaws.com/{{QSS3KeyPrefix}}scripts/DownloadDKCELicense.ps1"}'
                  - S3Bucket: !If
                      - UsingDefaultBucket
                      - !Sub '${QSS3BucketName}-${AWS::Region}'
                      - !Ref QSS3BucketName
                    S3Region: !If 
                      - UsingDefaultBucket
                      - !Ref AWS::Region
                      - !Ref QSS3BucketRegion
              commandLine: ./DownloadDKCELicense.ps1 -SIOSLicenseKeyFtpURL "{{SIOSLicenseKeyFtpURL}}"
        - name: CreateJob
          action: aws:runCommand
          onFailure: step:signalfailure
          inputs:
            DocumentName: AWS-RunRemoteScript
            InstanceIds:
              - '{{wsfcnode1InstanceId.InstanceId}}'
            CloudWatchOutputConfig:
              CloudWatchOutputEnabled: 'true'
              CloudWatchLogGroupName: !Ref QuickStartLogs
            Parameters:
              sourceType: S3
              sourceInfo: 
                !Sub 
                  - '{"path": "https://${S3Bucket}.s3.${S3Region}.amazonaws.com/{{QSS3KeyPrefix}}scripts/CreateJob.ps1"}'
                  - S3Bucket: !If
                      - UsingDefaultBucket
                      - !Sub '${QSS3BucketName}-${AWS::Region}'
                      - !Ref QSS3BucketName
                    S3Region: !If 
                      - UsingDefaultBucket
                      - !Ref AWS::Region
                      - !Ref QSS3BucketRegion
              commandLine: ./CreateJob.ps1 -JobName vol.D -JobDesc 'SQL Volume Protection' -SourceName {{WSFCNode1NetBIOSName}}.{{DomainDNSName}} -SourceVol D -SourceIP {{WSFCNode1PrivateIP1}} -TargetName {{WSFCNode2NetBIOSName}}.{{DomainDNSName}} -TargetIP {{WSFCNode2PrivateIP1}} -TargetVol D -SyncType S
        - name: CreateMirror
          action: aws:runCommand
          onFailure: step:signalfailure
          inputs:
            DocumentName: AWS-RunRemoteScript
            InstanceIds:
              - '{{wsfcnode1InstanceId.InstanceId}}'
            CloudWatchOutputConfig:
              CloudWatchOutputEnabled: 'true'
              CloudWatchLogGroupName: !Ref QuickStartLogs
            Parameters:
              sourceType: S3
              sourceInfo: 
                !Sub 
                  - '{"path": "https://${S3Bucket}.s3.${S3Region}.amazonaws.com/{{QSS3KeyPrefix}}scripts/CreateMirror.ps1"}'
                  - S3Bucket: !If
                      - UsingDefaultBucket
                      - !Sub '${QSS3BucketName}-${AWS::Region}'
                      - !Ref QSS3BucketName
                    S3Region: !If 
                      - UsingDefaultBucket
                      - !Ref AWS::Region
                      - !Ref QSS3BucketRegion
              commandLine: ./CreateMirror.ps1 -SourceIP {{WSFCNode1PrivateIP1}} -Volume D -TargetIP {{WSFCNode2PrivateIP1}} -SyncType S
        - name: dc1installDSCModules
          action: aws:runCommand
          onFailure: step:signalfailure
          inputs:
            DocumentName: AWS-RunPowerShellScript
            InstanceIds: 
              - '{{dc1InstanceId.InstanceId}}'
            CloudWatchOutputConfig:
              CloudWatchOutputEnabled: 'true'
              CloudWatchLogGroupName: !Ref QuickStartLogs
            Parameters:
              commands: 
                - |
                   [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
                   Install-PackageProvider -Name NuGet -MinimumVersion 2.8.5 -Force
                   Set-PSRepository -Name PSGallery -InstallationPolicy Trusted
                   Install-Module -Name xSmbShare
                   Install-Module -Name PSDscResources
        - name: configureWSFCFileShare
          action: aws:runCommand
          onFailure: step:signalfailure
          inputs:
            DocumentName: AWS-RunRemoteScript
            InstanceIds:
              - '{{dc1InstanceId.InstanceId}}'
            CloudWatchOutputConfig:
              CloudWatchOutputEnabled: 'true'
              CloudWatchLogGroupName: !Ref QuickStartLogs
            Parameters:
              sourceType: S3
              sourceInfo: 
                !Sub 
                  - '{"path": "https://${S3Bucket}.s3.${S3Region}.amazonaws.com/{{QSS3KeyPrefix}}scripts/WSFCFileShare.ps1"}'
                  - S3Bucket: !If
                      - UsingDefaultBucket
                      - !Sub '${QSS3BucketName}-${AWS::Region}'
                      - !Ref QSS3BucketName
                    S3Region: !If 
                      - UsingDefaultBucket
                      - !Ref AWS::Region
                      - !Ref QSS3BucketRegion
              commandLine: ./WSFCFileShare.ps1
        - name: InvokeADReplicationDC1
          action: aws:runCommand
          onFailure: step:signalfailure
          inputs:
            DocumentName: AWS-RunPowerShellScript
            InstanceIds: 
              - '{{dc1InstanceId.InstanceId}}'
            CloudWatchOutputConfig:
              CloudWatchOutputEnabled: 'true'
              CloudWatchLogGroupName: !Ref QuickStartLogs
            Parameters:
              commands: 
                - |
                   repadmin /syncall /A /e /P
        - name: InvokeADReplicationDC2
          action: aws:runCommand
          onFailure: step:signalfailure
          inputs:
            DocumentName: AWS-RunPowerShellScript
            InstanceIds: 
              - '{{dc2InstanceId.InstanceId}}'
            CloudWatchOutputConfig:
              CloudWatchOutputEnabled: 'true'
              CloudWatchLogGroupName: !Ref QuickStartLogs
            Parameters:
              commands: 
                - |
                   repadmin /syncall /A /e /P
        - name: WSFCConfigureBranch
          action: aws:branch
          inputs:
            Choices:
            - NextStep: Node1configureWSFCSQL
              Variable: '{{SQLServerVersion}}'
              StringEquals: 2014SP1
            - NextStep: Node1configureWSFCNOSQL
              Variable: '{{SQLServerVersion}}'
              StringEquals: None
        - name: Node1configureWSFCSQL
          action: aws:runCommand
          onFailure: step:signalfailure
          inputs:
            DocumentName: AWS-RunRemoteScript
            InstanceIds:
              - '{{wsfcnode1InstanceId.InstanceId}}'
            CloudWatchOutputConfig:
              CloudWatchOutputEnabled: 'true'
              CloudWatchLogGroupName: !Ref QuickStartLogs
            Parameters:
              sourceType: S3
              sourceInfo: 
                !Sub 
                  - '{"path": "https://${S3Bucket}.s3.${S3Region}.amazonaws.com/{{QSS3KeyPrefix}}scripts/Node1Config.ps1"}'
                  - S3Bucket: !If
                      - UsingDefaultBucket
                      - !Sub '${QSS3BucketName}-${AWS::Region}'
                      - !Ref QSS3BucketName
                    S3Region: !If 
                      - UsingDefaultBucket
                      - !Ref AWS::Region
                      - !Ref QSS3BucketRegion
              commandLine: ./Node1Config.ps1 -DomainNetBIOSName {{DomainNetBIOSName}} -DomainDNSName {{DomainDNSName}} -WSFCNodePrivateIP2 {{WSFCNode1PrivateIP2}} -ClusterName {{ClusterName}} -DomainAdminUser {{DomainAdminUser}} -DomainAdminPassword {{DomainAdminPassword}} -SQLServiceAccount {{SQLServiceAccount}} -SQLServiceAccountPassword {{SQLServiceAccountPassword}} -FileServerNetBIOSName {{ADServer1NetBIOSName}}
        - name: Node1Reboot1SQL
          action: aws:runCommand
          onFailure: step:signalfailure
          inputs:
            DocumentName: AWS-RunPowerShellScript
            InstanceIds: 
              - '{{wsfcnode1InstanceId.InstanceId}}'
            CloudWatchOutputConfig:
              CloudWatchOutputEnabled: 'true'
              CloudWatchLogGroupName: !Ref QuickStartLogs
            Parameters:
              commands: 
                - |     
                   function DscStatusCheck () {
                       $LCMState = (Get-DscLocalConfigurationManager).LCMState
                       if ($LCMState -eq 'PendingConfiguration' -Or $LCMState -eq 'PendingReboot') {
                           'returning 3010, should continue after reboot'
                           exit 3010
                       } else {
                         'Completed'
                       }
                   }
                   
                   Start-DscConfiguration 'C:\AWSQuickstart\WSFCNode1Config' -Wait -Verbose -Force
                   
                   DscStatusCheck
        - name: Node2configureWSFCSQL
          action: aws:runCommand
          onFailure: step:signalfailure
          inputs:
            DocumentName: AWS-RunRemoteScript
            InstanceIds:
              - '{{wsfcnode2InstanceId.InstanceId}}'
            CloudWatchOutputConfig:
              CloudWatchOutputEnabled: 'true'
              CloudWatchLogGroupName: !Ref QuickStartLogs
            Parameters:
              sourceType: S3
              sourceInfo: 
                !Sub 
                  - '{"path": "https://${S3Bucket}.s3.${S3Region}.amazonaws.com/{{QSS3KeyPrefix}}scripts/AdditionalNodeConfig.ps1"}'
                  - S3Bucket: !If
                      - UsingDefaultBucket
                      - !Sub '${QSS3BucketName}-${AWS::Region}'
                      - !Ref QSS3BucketName
                    S3Region: !If 
                      - UsingDefaultBucket
                      - !Ref AWS::Region
                      - !Ref QSS3BucketRegion
              commandLine: ./AdditionalNodeConfig.ps1 -DomainNetBIOSName {{DomainNetBIOSName}} -WSFCNodePrivateIP2 {{WSFCNode2PrivateIP2}} -ClusterName {{ClusterName}} -DomainAdminUser {{DomainAdminUser}} -DomainAdminPassword {{DomainAdminPassword}} -SQLServiceAccount {{SQLServiceAccount}} -SQLServiceAccountPassword {{SQLServiceAccountPassword}}
        - name: Node2Reboot1SQL
          action: aws:runCommand
          onFailure: step:signalfailure
          nextStep: WaitForCluster
          inputs:
            DocumentName: AWS-RunPowerShellScript
            InstanceIds: 
              - '{{wsfcnode2InstanceId.InstanceId}}'
            CloudWatchOutputConfig:
              CloudWatchOutputEnabled: 'true'
              CloudWatchLogGroupName: !Ref QuickStartLogs
            Parameters:
              commands: 
                - |     
                   function DscStatusCheck () {
                       $LCMState = (Get-DscLocalConfigurationManager).LCMState
                       if ($LCMState -eq 'PendingConfiguration' -Or $LCMState -eq 'PendingReboot') {
                           'returning 3010, should continue after reboot'
                           exit 3010
                       } else {
                         'Completed'
                       }
                   }
                   Start-DscConfiguration 'C:\AWSQuickstart\AdditionalWSFCNode' -Wait -Verbose -Force
                   DscStatusCheck
        - name: Node1configureWSFCNOSQL
          action: aws:runCommand
          onFailure: step:signalfailure
          inputs:
            DocumentName: AWS-RunRemoteScript
            InstanceIds:
              - '{{wsfcnode1InstanceId.InstanceId}}'
            CloudWatchOutputConfig:
              CloudWatchOutputEnabled: 'true'
              CloudWatchLogGroupName: !Ref QuickStartLogs
            Parameters:
              sourceType: S3
              sourceInfo: 
                !Sub 
                  - '{"path": "https://${S3Bucket}.s3.${S3Region}.amazonaws.com/{{QSS3KeyPrefix}}scripts/Node1Config.ps1"}'
                  - S3Bucket: !If
                      - UsingDefaultBucket
                      - !Sub '${QSS3BucketName}-${AWS::Region}'
                      - !Ref QSS3BucketName
                    S3Region: !If 
                      - UsingDefaultBucket
                      - !Ref AWS::Region
                      - !Ref QSS3BucketRegion
              commandLine: ./Node1Config.ps1 -DomainNetBIOSName {{DomainNetBIOSName}} -DomainDNSName {{DomainDNSName}} -WSFCNodePrivateIP2 {{WSFCNode1PrivateIP2}} -ClusterName {{ClusterName}} -DomainAdminUser {{DomainAdminUser}} -DomainAdminPassword {{DomainAdminPassword}} -FileServerNetBIOSName {{ADServer1NetBIOSName}}
        - name: Node1Reboot1NoSQL
          action: aws:runCommand
          onFailure: step:signalfailure
          inputs:
            DocumentName: AWS-RunPowerShellScript
            InstanceIds: 
              - '{{wsfcnode1InstanceId.InstanceId}}'
            CloudWatchOutputConfig:
              CloudWatchOutputEnabled: 'true'
              CloudWatchLogGroupName: !Ref QuickStartLogs
            Parameters:
              commands: 
                - |     
                   function DscStatusCheck () {
                       $LCMState = (Get-DscLocalConfigurationManager).LCMState
                       if ($LCMState -eq 'PendingConfiguration' -Or $LCMState -eq 'PendingReboot') {
                           'returning 3010, should continue after reboot'
                           exit 3010
                       } else {
                         'Completed'
                       }
                   }
                   Start-DscConfiguration 'C:\AWSQuickstart\WSFCNode1Config' -Wait -Verbose -Force
                   DscStatusCheck
        - name: Node2ConfigureWSFCNOSQL
          action: aws:runCommand
          onFailure: step:signalfailure
          nextStep: Node2Reboot1NoSQL
          inputs:
            DocumentName: AWS-RunRemoteScript
            InstanceIds:
              - '{{wsfcnode2InstanceId.InstanceId}}'
            CloudWatchOutputConfig:
              CloudWatchOutputEnabled: 'true'
              CloudWatchLogGroupName: !Ref QuickStartLogs
            Parameters:
              sourceType: S3
              sourceInfo: 
                !Sub 
                  - '{"path": "https://${S3Bucket}.s3.${S3Region}.amazonaws.com/{{QSS3KeyPrefix}}scripts/AdditionalNodeConfig.ps1"}'
                  - S3Bucket: !If
                      - UsingDefaultBucket
                      - !Sub '${QSS3BucketName}-${AWS::Region}'
                      - !Ref QSS3BucketName
                    S3Region: !If 
                      - UsingDefaultBucket
                      - !Ref AWS::Region
                      - !Ref QSS3BucketRegion
              commandLine: ./AdditionalNodeConfig.ps1 -DomainNetBIOSName {{DomainNetBIOSName}} -WSFCNodePrivateIP2 {{WSFCNode2PrivateIP2}} -ClusterName {{ClusterName}} -DomainAdminUser {{DomainAdminUser}} -DomainAdminPassword {{DomainAdminPassword}}
        - name: Node2Reboot1NoSQL
          action: aws:runCommand
          onFailure: step:signalfailure
          inputs:
            DocumentName: AWS-RunPowerShellScript
            InstanceIds: 
              - '{{wsfcnode2InstanceId.InstanceId}}'
            CloudWatchOutputConfig:
              CloudWatchOutputEnabled: 'true'
              CloudWatchLogGroupName: !Ref QuickStartLogs
            Parameters:
              commands: 
                - |     
                   function DscStatusCheck () {
                       $LCMState = (Get-DscLocalConfigurationManager).LCMState
                       if ($LCMState -eq 'PendingConfiguration' -Or $LCMState -eq 'PendingReboot') {
                           'returning 3010, should continue after reboot'
                           exit 3010
                       } else {
                         'Completed'
                       }
                   }
                   Start-DscConfiguration 'C:\AWSQuickstart\AdditionalWSFCNode' -Wait -Verbose -Force
                   DscStatusCheck
        - name: WaitForCluster
          action: aws:runCommand
          onFailure: step:signalfailure
          inputs:
            DocumentName: AWS-RunRemoteScript
            InstanceIds:
              - '{{wsfcnode1InstanceId.InstanceId}}'
            CloudWatchOutputConfig:
              CloudWatchOutputEnabled: 'true'
              CloudWatchLogGroupName: !Ref QuickStartLogs
            Parameters:
              sourceType: S3
              sourceInfo: 
                !Sub 
                  - '{"path": "https://${S3Bucket}.s3.${S3Region}.amazonaws.com/{{QSS3KeyPrefix}}scripts/WaitForCluster.ps1"}'
                  - S3Bucket: !If
                      - UsingDefaultBucket
                      - !Sub '${QSS3BucketName}-${AWS::Region}'
                      - !Ref QSS3BucketName
                    S3Region: !If 
                      - UsingDefaultBucket
                      - !Ref AWS::Region
                      - !Ref QSS3BucketRegion
              commandLine: ./WaitForCluster.ps1 -DomainNetBIOSName {{DomainNetBIOSName}} -DomainAdminUser {{DomainAdminUser}} -DomainAdminPassword {{DomainAdminPassword}} -NetBIOSName {{WSFCNode1NetBIOSName}}
        - name: registerclustervolume
          action: aws:runCommand
          onFailure: step:signalfailure
          inputs:
            DocumentName: AWS-RunRemoteScript
            InstanceIds:
              - '{{wsfcnode1InstanceId.InstanceId}}'
            CloudWatchOutputConfig:
              CloudWatchOutputEnabled: 'true'
              CloudWatchLogGroupName: !Ref QuickStartLogs
            Parameters:
              sourceType: S3
              sourceInfo: 
                !Sub 
                  - '{"path": "https://${S3Bucket}.s3.${S3Region}.amazonaws.com/{{QSS3KeyPrefix}}scripts/RegisterClusterVolume.ps1"}'
                  - S3Bucket: !If
                      - UsingDefaultBucket
                      - !Sub '${QSS3BucketName}-${AWS::Region}'
                      - !Ref QSS3BucketName
                    S3Region: !If 
                      - UsingDefaultBucket
                      - !Ref AWS::Region
                      - !Ref QSS3BucketRegion
              commandLine: ./RegisterClusterVolume.ps1 -Volume D
        - name: InstallSQLBranch
          action: aws:branch
          inputs:
            Choices:
            - NextStep: InstallSQL
              Variable: '{{SQLServerVersion}}'
              StringEquals: 2014SP1
            - NextStep: DisableCredSSP
              Variable: '{{SQLServerVersion}}'
              StringEquals: None
        - name: InstallSQL
          action: aws:runCommand
          onFailure: step:signalfailure
          inputs:
            DocumentName: AWS-RunRemoteScript
            InstanceIds:
              - '{{wsfcnode1InstanceId.InstanceId}}'
            CloudWatchOutputConfig:
              CloudWatchOutputEnabled: 'true'
              CloudWatchLogGroupName: !Ref QuickStartLogs
            Parameters:
              sourceType: S3
              sourceInfo: 
                !Sub 
                  - '{"path": "https://${S3Bucket}.s3.${S3Region}.amazonaws.com/{{QSS3KeyPrefix}}scripts/InstallSQLEE.ps1"}'
                  - S3Bucket: !If
                      - UsingDefaultBucket
                      - !Sub '${QSS3BucketName}-${AWS::Region}'
                      - !Ref QSS3BucketName
                    S3Region: !If 
                      - UsingDefaultBucket
                      - !Ref AWS::Region
                      - !Ref QSS3BucketRegion
              commandLine: ./InstallSQLEE.ps1 -DomainNetBIOSName {{DomainNetBIOSName}} -DomainAdminUser {{DomainAdminUser}} -DomainAdminPassword {{DomainAdminPassword}} -SQLServiceAccount {{SQLServiceAccount}} -SQLServiceAccountPassword {{SQLServiceAccountPassword}} -NetBIOSName {{WSFCNode1NetBIOSName}} -SQLServerClusterIP {{WSFCNode1PrivateIP3}} -ClusterSubnetCidr {{PrivateSubnet1CIDR}}
        - name: SetFolderPermissions
          action: aws:runCommand
          onFailure: step:signalfailure
          inputs:
            DocumentName: AWS-RunRemoteScript
            InstanceIds:
              - '{{wsfcnode2InstanceId.InstanceId}}'
            CloudWatchOutputConfig:
              CloudWatchOutputEnabled: 'true'
              CloudWatchLogGroupName: !Ref QuickStartLogs
            Parameters:
              sourceType: S3
              sourceInfo: 
                !Sub 
                  - '{"path": "https://${S3Bucket}.s3.${S3Region}.amazonaws.com/{{QSS3KeyPrefix}}scripts/Set-Folder-Permissions.ps1"}'
                  - S3Bucket: !If
                      - UsingDefaultBucket
                      - !Sub '${QSS3BucketName}-${AWS::Region}'
                      - !Ref QSS3BucketName
                    S3Region: !If 
                      - UsingDefaultBucket
                      - !Ref AWS::Region
                      - !Ref QSS3BucketRegion
              commandLine: ./Set-Folder-Permissions.ps1 -DomainNetBIOSName {{DomainNetBIOSName}} -DomainAdminUser {{DomainAdminUser}} -DomainAdminPassword {{DomainAdminPassword}} -SQLServiceAccount {{SQLServiceAccount}} -FileServerNetBIOSName {{ADServer1NetBIOSName}} -ClusterName {{ClusterName}}
        - name: WaitForClusterGroup
          action: aws:runCommand
          onFailure: step:signalfailure
          inputs:
            DocumentName: AWS-RunRemoteScript
            InstanceIds:
              - '{{wsfcnode2InstanceId.InstanceId}}'
            CloudWatchOutputConfig:
              CloudWatchOutputEnabled: 'true'
              CloudWatchLogGroupName: !Ref QuickStartLogs
            Parameters:
              sourceType: S3
              sourceInfo: 
                !Sub 
                  - '{"path": "https://${S3Bucket}.s3.${S3Region}.amazonaws.com/{{QSS3KeyPrefix}}scripts/WaitForClusterGroup.ps1"}'
                  - S3Bucket: !If
                      - UsingDefaultBucket
                      - !Sub '${QSS3BucketName}-${AWS::Region}'
                      - !Ref QSS3BucketName
                    S3Region: !If 
                      - UsingDefaultBucket
                      - !Ref AWS::Region
                      - !Ref QSS3BucketRegion
              commandLine: ./WaitForClusterGroup.ps1 -DomainNetBIOSName {{DomainNetBIOSName}} -DomainAdminUser {{DomainAdminUser}} -DomainAdminPassword {{DomainAdminPassword}} -NetBIOSName {{WSFCNode2NetBIOSName}}
        - name: InstallSQLAddNode
          action: aws:runCommand
          onFailure: step:signalfailure
          inputs:
            DocumentName: AWS-RunRemoteScript
            InstanceIds:
              - '{{wsfcnode2InstanceId.InstanceId}}'
            CloudWatchOutputConfig:
              CloudWatchOutputEnabled: 'true'
              CloudWatchLogGroupName: !Ref QuickStartLogs
            Parameters:
              sourceType: S3
              sourceInfo: 
                !Sub 
                  - '{"path": "https://${S3Bucket}.s3.${S3Region}.amazonaws.com/{{QSS3KeyPrefix}}scripts/InstallSQLEE-AddNode.ps1"}'
                  - S3Bucket: !If
                      - UsingDefaultBucket
                      - !Sub '${QSS3BucketName}-${AWS::Region}'
                      - !Ref QSS3BucketName
                    S3Region: !If 
                      - UsingDefaultBucket
                      - !Ref AWS::Region
                      - !Ref QSS3BucketRegion
              commandLine: "./InstallSQLEE-AddNode.ps1 -DomainNetBIOSName {{DomainNetBIOSName}} -DomainAdminUser {{DomainAdminUser}} -DomainAdminPassword {{DomainAdminPassword}} -SQLServiceAccount {{SQLServiceAccount}} -SQLServiceAccountPassword {{SQLServiceAccountPassword}} -NetBIOSName {{WSFCNode2NetBIOSName}} -ClusterIPAddresses {{WSFCNode1PrivateIP3}},{{WSFCNode2PrivateIP3}} -ClusterSubnetCidrs {{PrivateSubnet1CIDR}},{{PrivateSubnet2CIDR}}"
        - name: DisableCredSSP
          action: aws:runCommand
          onFailure: step:signalfailure
          inputs:
            DocumentName: AWS-RunPowerShellScript
            InstanceIds: 
              - '{{wsfcnodesInstanceId.InstanceIds}}'
            CloudWatchOutputConfig:
              CloudWatchOutputEnabled: 'true'
              CloudWatchLogGroupName: !Ref QuickStartLogs
            Parameters:
              commands: 
                - Copy-S3Object -Bucket {{QSS3BucketName}} -key {{QSS3KeyPrefix}}submodules/quickstart-microsoft-utilities/scripts/DisableCredSsp.ps1 -LocalFile C:\cfn\scripts\DisableCredSsp.ps1
        - name: DisableCredSSPReboot
          action: aws:runCommand
          onFailure: step:signalfailure
          inputs:
            DocumentName: AWS-RunPowerShellScript
            InstanceIds: 
              - '{{wsfcnodesInstanceId.InstanceIds}}'
            CloudWatchOutputConfig:
              CloudWatchOutputEnabled: 'true'
              CloudWatchLogGroupName: !Ref QuickStartLogs
            Parameters:
              commands: 
                - |
                   $CredSSPEnabled = (Get-ItemProperty -Path 'HKLM:\SOFTWARE\Policies\Microsoft\Windows\CredentialsDelegation' -Name AllowFreshCredentials -ErrorAction SilentlyContinue).AllowFreshCredentials
                   if ($CredSSPEnabled -eq 1) {
                     C:\cfn\scripts\DisableCredSsp.ps1
                     'returning 3010, should continue after reboot'
                      exit 3010
                   } else {'Next Step'}
        - name: DSCCleanup
          action: aws:runCommand
          onFailure: step:signalfailure
          inputs:
            DocumentName: AWS-RunPowerShellScript
            InstanceIds: 
              - '{{wsfcnodesInstanceId.InstanceIds}}'
            CloudWatchOutputConfig:
              CloudWatchOutputEnabled: 'true'
              CloudWatchLogGroupName: !Ref QuickStartLogs
            Parameters:
              commands: 
                - Remove-Item -Path C:\AWSQuickstart\ -recurse
        # Determines if CFN Needs to be Signaled or if Work flow should just end
        - name: CFNSignalEnd
          action: aws:branch
          inputs:
            Choices:
            - NextStep: signalsuccess
              Not: 
                Variable: '{{StackName}}'
                StringEquals: ''
            - NextStep: sleepend
              Variable: '{{StackName}}'
              StringEquals: ''
        # If all steps complete successfully signals CFN of Success
        - name: signalsuccess
          action: aws:executeAwsApi
          isEnd: true
          inputs:
            Service: cloudformation
            Api: SignalResource
            LogicalResourceId: SSMWaitCondition
            StackName: '{{StackName}}'
            Status: SUCCESS
            UniqueId: '{{wsfcnode2InstanceId.InstanceId}}'
        # If CFN Signl Not Needed this sleep ends work flow
        - name: sleepend
          action: aws:sleep
          isEnd: true
          inputs:
            Duration: PT1S
        # If any steps fails signals CFN of Failure
        - name: signalfailure
          action: aws:executeAwsApi
          inputs:
            Service: cloudformation
            Api: SignalResource
            LogicalResourceId: SSMWaitCondition
            StackName: '{{StackName}}'
            Status: FAILURE
            UniqueId: '{{wsfcnode2InstanceId.InstanceId}}'
  AWSQuickstartSIOSDKCERole:
    Type: AWS::IAM::Role
    Properties:
      Policies:
        - PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - s3:GetObject
                  - s3:ListBucket
                Resource: 
                  - !Sub 'arn:${AWS::Partition}:s3:::${QSS3BucketName}/${QSS3KeyPrefix}*'
                  - !Sub 'arn:${AWS::Partition}:s3:::${QSS3BucketName}'
                Effect: Allow
          PolicyName: aws-quick-start-s3-policy
        - PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - cloudformation:SignalResource
                Resource: 
                  - !Sub arn:${AWS::Partition}:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${AWS::StackName}/*
              - Effect: Allow
                Action:
                  - ec2:DescribeInstances
                  - ec2:DescribeInstanceStatus
                  - ssm:*
                Resource: '*'
          PolicyName: SIOS-SSM-AutomationExecution
      Path: /
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Principal:
              Service:
                - ec2.amazonaws.com
                - ssm.amazonaws.com
            Effect: Allow
        Version: '2012-10-17'
  SIOSSSMPassRolePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: SIOS-SSM-PassRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - iam:PassRole
            Resource: !Sub arn:${AWS::Partition}:iam::${AWS::AccountId}:role/${AWSQuickstartSIOSDKCERole}
      Roles:
        - !Ref AWSQuickstartSIOSDKCERole
  WSFCRole:
    Type: AWS::IAM::Role
    Properties:
      Policies:
        - PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - s3:GetObject
                Resource: 
                  - !Sub arn:${AWS::Partition}:s3:::${QSS3BucketName}/${QSS3KeyPrefix}*
                Effect: Allow
          PolicyName: aws-quick-start-s3-policy
        - PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ssm:StartAutomationExecution
                Resource: '*'
          PolicyName: QS-SIOS-SSM
        - PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - iam:PassRole
                Resource: !Sub arn:${AWS::Partition}:iam::${AWS::AccountId}:role/${AWSQuickstartSIOSDKCERole}
          PolicyName: QS-SIOS-SSM-PassRole
      Path: /
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/service-role/AmazonEC2RoleforSSM
        - !Sub arn:${AWS::Partition}:iam::aws:policy/AmazonEC2ReadOnlyAccess
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Principal:
              Service:
                - ec2.amazonaws.com
            Effect: Allow
        Version: '2012-10-17'
  WSFCProfile:
    Type: AWS::IAM::InstanceProfile
    DependsOn: WSFCRole
    Properties:
      Roles:
        - !Ref WSFCRole
      Path: /
  WSFCNode1:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !If
        - ByolAmiCondition
        - !FindInMap
          - AWSAMIRegionMap
          - !Ref AWS::Region
          - !FindInMap
            - BYOLNameMap
            - !Ref OSVersion
            - Code
        - !FindInMap
          - AWSAMIRegionMap
          - !Ref AWS::Region
          - !FindInMap
            - PAYGNameMap
            - !Ref OSVersion
            - Code
      IamInstanceProfile: !Ref WSFCProfile
      InstanceType: !Ref WSFCNode1InstanceType
      EbsOptimized: true
      NetworkInterfaces:
        - DeleteOnTermination: true
          DeviceIndex: '0'
          SubnetId: !Ref PrivateSubnet1ID
          PrivateIpAddresses:
            - Primary: true
              PrivateIpAddress: !Ref WSFCNode1PrivateIP1
            - Primary: false
              PrivateIpAddress: !Ref WSFCNode1PrivateIP2
            - Primary: false
              PrivateIpAddress: !Ref WSFCNode1PrivateIP3
          GroupSet:
            - !Ref DomainMemberSGID
            - !Ref WSFCSecurityGroup
            - !Ref WSFCClientSecurityGroup
            - !Ref SIOSDataKeeperSG
      Tags:
        - Key: Name
          Value: !Ref WSFCNode1NetBIOSName
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 127
            VolumeType: gp2
        - DeviceName: /dev/xvdca
          VirtualName: ephemeral0
      KeyName: !Ref KeyPairName
  WSFCNode2:
    Type: AWS::EC2::Instance
    DependsOn:
      - WSFCNode1
    Properties:
      ImageId: !If
        - ByolAmiCondition
        - !FindInMap
          - AWSAMIRegionMap
          - !Ref AWS::Region
          - !FindInMap
            - BYOLNameMap
            - !Ref OSVersion
            - Code
        - !FindInMap
          - AWSAMIRegionMap
          - !Ref AWS::Region
          - !FindInMap
            - PAYGNameMap
            - !Ref OSVersion
            - Code
      IamInstanceProfile: !Ref WSFCProfile
      InstanceType: !Ref WSFCNode2InstanceType
      EbsOptimized: true
      NetworkInterfaces:
        - DeleteOnTermination: true
          DeviceIndex: '0'
          SubnetId: !Ref PrivateSubnet2ID
          PrivateIpAddresses:
            - Primary: true
              PrivateIpAddress: !Ref WSFCNode2PrivateIP1
            - Primary: false
              PrivateIpAddress: !Ref WSFCNode2PrivateIP2
            - Primary: false
              PrivateIpAddress: !Ref WSFCNode2PrivateIP3
          GroupSet:
            - !Ref DomainMemberSGID
            - !Ref WSFCSecurityGroup
            - !Ref WSFCClientSecurityGroup
            - !Ref SIOSDataKeeperSG
      Tags:
        - Key: Name
          Value: !Ref WSFCNode2NetBIOSName
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 127
            VolumeType: gp2
        - DeviceName: /dev/xvdca
          VirtualName: ephemeral0
      KeyName: !Ref KeyPairName
      UserData: !Base64
        Fn::Join:
          - ''
          - - "<powershell>\n"
            - 'Start-SSMAutomationExecution -DocumentName '
            - !Sub '"${AWSQuickstartSIOSDKCE}"'
            - ' -Parameter @{"AMIType"='
            - !Sub '"${AMIType}"'
            - ';"OSVersion"='
            - !Sub '"${OSVersion}"'
            - ';"ADServer1NetBIOSName"='
            - !Sub '"${ADServer1NetBIOSName}"'
            - ';"ADServer1PrivateIP"='
            - !Sub '"${ADServer1PrivateIP}"'
            - ';"ADServer2NetBIOSName"='
            - !Sub '"${ADServer2NetBIOSName}"'
            - ';"ADServer2PrivateIP"='
            - !Sub '"${ADServer2PrivateIP}"'
            - ';"DomainAdminPassword"='
            - !Sub '"${DomainAdminPassword}"'
            - ';"DomainAdminUser"='
            - !Sub '"${DomainAdminUser}"'
            - ';"DomainDNSName"='
            - !Sub '"${DomainDNSName}"'
            - ';"DomainNetBIOSName"='
            - !Sub '"${DomainNetBIOSName}"'
            - ';"PrivateSubnet1CIDR"='
            - !Sub '"${PrivateSubnet1CIDR}"'
            - ';"PrivateSubnet2CIDR"='
            - !Sub '"${PrivateSubnet2CIDR}"'
            - ';"SIOSLicenseKeyFtpURL"='
            - !Sub '"${SIOSLicenseKeyFtpURL}"'
            - ';"SQLServerVersion"='
            - !Sub '"${SQLServerVersion}"'
            - ';"SQLServiceAccount"='
            - !Sub '"${SQLServiceAccount}"'
            - ';"SQLServiceAccountPassword"='
            - !Sub '"${SQLServiceAccountPassword}"'
            - ';"ClusterName"='
            - !Sub '"${ClusterName}"'
            - ';"WSFCNode1NetBIOSName"='
            - !Sub '"${WSFCNode1NetBIOSName}"'
            - ';"WSFCNode1PrivateIP1"='
            - !Sub '"${WSFCNode1PrivateIP1}"'
            - ';"WSFCNode1PrivateIP2"='
            - !Sub '"${WSFCNode1PrivateIP2}"'
            - ';"WSFCNode1PrivateIP3"='
            - !Sub '"${WSFCNode1PrivateIP3}"'
            - ';"WSFCNode2NetBIOSName"='
            - !Sub '"${WSFCNode2NetBIOSName}"'
            - ';"WSFCNode2PrivateIP1"='
            - !Sub '"${WSFCNode2PrivateIP1}"'
            - ';"WSFCNode2PrivateIP2"='
            - !Sub '"${WSFCNode2PrivateIP2}"'
            - ';"WSFCNode2PrivateIP3"='
            - !Sub '"${WSFCNode2PrivateIP3}"'
            - ';"QSS3BucketName"='
            - !Sub '"${QSS3BucketName}"'
            - ';"QSS3BucketRegion"='
            - !Sub '"${QSS3BucketRegion}"'
            - ';"QSS3KeyPrefix"='
            - !Sub '"${QSS3KeyPrefix}"'
            - ';"StackName"='
            - !Sub '"${AWS::StackName}"'
            - ';"AutomationAssumeRole"='
            - !Sub '"arn:aws:iam::${AWS::AccountId}:role/${AWSQuickstartSIOSDKCERole}"'
            - '}'
            - "\n"
            - "</powershell>\n"
  WSFCNode1Volume1:
    Type: AWS::EC2::Volume
    Properties:
      Size: !Ref Volume1Size
      VolumeType: !Ref Volume1Type
      AvailabilityZone: !GetAtt WSFCNode1.AvailabilityZone
  WSFCNode2Volume1:
    Type: AWS::EC2::Volume
    Properties:
      Size: !Ref Volume1Size
      VolumeType: !Ref Volume1Type
      AvailabilityZone: !GetAtt WSFCNode2.AvailabilityZone
  WSFCNode1Volume1Attachment:
    Type: AWS::EC2::VolumeAttachment
    Properties:
      Device: /dev/xvdb
      InstanceId: !Ref WSFCNode1
      VolumeId: !Ref WSFCNode1Volume1
  WSFCNode2Volume1Attachment:
    Type: AWS::EC2::VolumeAttachment
    Properties:
      Device: /dev/xvdb
      InstanceId: !Ref WSFCNode2
      VolumeId: !Ref WSFCNode2Volume1
  SSMWaitHandle: 
    Type: AWS::CloudFormation::WaitConditionHandle
  SSMWaitCondition: 
    Type: AWS::CloudFormation::WaitCondition
    CreationPolicy:
      ResourceSignal:
        Timeout: PT300M
        Count: 1
    DependsOn: WSFCNode2
    Properties: 
      Handle: 
        Ref: SSMWaitHandle
      Timeout: '18000'
      Count: 1
  SIOSDataKeeperSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Replication node communication
      VpcId: !Ref VPCID
  SIOSDataKeeperSGIngressTCP137:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref SIOSDataKeeperSG
      SourceSecurityGroupId: !Ref SIOSDataKeeperSG
      IpProtocol: tcp
      FromPort: 137
      ToPort: 139
  SIOSDataKeeperSGIngressUDP137:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref SIOSDataKeeperSG
      SourceSecurityGroupId: !Ref SIOSDataKeeperSG
      IpProtocol: udp
      FromPort: 137
      ToPort: 138
  SIOSDataKeeperSGIngressTCP139:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref SIOSDataKeeperSG
      SourceSecurityGroupId: !Ref SIOSDataKeeperSG
      IpProtocol: tcp
      FromPort: 139
      ToPort: 139
  SIOSDataKeeperSGIngressTCP9999:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref SIOSDataKeeperSG
      SourceSecurityGroupId: !Ref SIOSDataKeeperSG
      IpProtocol: tcp
      FromPort: 9999
      ToPort: 9999
  SIOSDataKeeperSGIngressTCP10003:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref SIOSDataKeeperSG
      SourceSecurityGroupId: !Ref SIOSDataKeeperSG
      IpProtocol: tcp
      FromPort: 10000
      ToPort: 10025
  SIOSDataKeeperSGIngressTCP445:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref SIOSDataKeeperSG
      SourceSecurityGroupId: !Ref SIOSDataKeeperSG
      IpProtocol: tcp
      FromPort: 445
      ToPort: 445
  WSFCSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable the WSFC and SQL AlwaysOn Availability Group communications
      VpcId: !Ref VPCID
  WSFCSecurityGroupIngressIcmp:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref WSFCSecurityGroup
      SourceSecurityGroupId: !Ref WSFCSecurityGroup
      IpProtocol: icmp
      FromPort: -1
      ToPort: -1
  WSFCSecurityGroupIngressTcp135:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref WSFCSecurityGroup
      SourceSecurityGroupId: !Ref WSFCSecurityGroup
      IpProtocol: tcp
      FromPort: 135
      ToPort: 135
  WSFCSecurityGroupIngressTcp137:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref WSFCSecurityGroup
      SourceSecurityGroupId: !Ref WSFCSecurityGroup
      IpProtocol: tcp
      FromPort: 137
      ToPort: 137
  WSFCSecurityGroupIngressTcp445:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref WSFCSecurityGroup
      SourceSecurityGroupId: !Ref WSFCSecurityGroup
      IpProtocol: tcp
      FromPort: 445
      ToPort: 445
  WSFCSecurityGroupIngressTcp1433:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref WSFCSecurityGroup
      SourceSecurityGroupId: !Ref WSFCSecurityGroup
      IpProtocol: tcp
      FromPort: 1433
      ToPort: 1434
  WSFCSecurityGroupIngressTcp3343:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref WSFCSecurityGroup
      SourceSecurityGroupId: !Ref WSFCSecurityGroup
      IpProtocol: tcp
      FromPort: 3343
      ToPort: 3343
  WSFCSecurityGroupIngressTcp5022:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref WSFCSecurityGroup
      SourceSecurityGroupId: !Ref WSFCSecurityGroup
      IpProtocol: tcp
      FromPort: 5022
      ToPort: 5022
  WSFCSecurityGroupIngressTcp5985:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref WSFCSecurityGroup
      SourceSecurityGroupId: !Ref WSFCSecurityGroup
      IpProtocol: tcp
      FromPort: 5985
      ToPort: 5985
  WSFCSecurityGroupIngressUdp137:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref WSFCSecurityGroup
      SourceSecurityGroupId: !Ref WSFCSecurityGroup
      IpProtocol: udp
      FromPort: 137
      ToPort: 137
  WSFCSecurityGroupIngressUdp3343:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref WSFCSecurityGroup
      SourceSecurityGroupId: !Ref WSFCSecurityGroup
      IpProtocol: udp
      FromPort: 3343
      ToPort: 3343
  WSFCSecurityGroupIngressUdp1434:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref WSFCSecurityGroup
      SourceSecurityGroupId: !Ref WSFCSecurityGroup
      IpProtocol: udp
      FromPort: 1434
      ToPort: 1434
  WSFCSecurityGroupIngressTcpHighPorts:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref WSFCSecurityGroup
      SourceSecurityGroupId: !Ref WSFCSecurityGroup
      IpProtocol: tcp
      FromPort: 49152
      ToPort: 65535
  WSFCSecurityGroupIngressUdpHighPorts:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref WSFCSecurityGroup
      SourceSecurityGroupId: !Ref WSFCSecurityGroup
      IpProtocol: udp
      FromPort: 49152
      ToPort: 65535
  SQLServerAccessSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPCID
      GroupDescription: Allows access to SQL Servers
  WSFCClientSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SQL Client access ports
      VpcId: !Ref VPCID
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 1433
          ToPort: 1433
          SourceSecurityGroupId: !Ref SQLServerAccessSecurityGroup
Outputs:
  DomainAdmin:
    Value: !Join
      - ''
      - - !Ref DomainNetBIOSName
        - \
        - !Ref DomainAdminUser
    Description: Domain administrator account
  LocalAdmin:
    Value: Administrator
    Description: Please retrieve Administrator password of the instance
  WSFCNode1NetBIOSName:
    Value: !Ref WSFCNode1NetBIOSName
    Description: NetBIOS name of the 1st WSFC Node
  WSFCNode2NetBIOSName:
    Value: !Ref WSFCNode2NetBIOSName
    Description: NetBIOS name of the 2nd WSFC Node
  SQLServerAccessSecurityGroup:
    Value: !Ref SQLServerAccessSecurityGroup
    Description: Add instances that require access to SQL to this Security Group
...  
